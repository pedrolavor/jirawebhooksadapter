{"version":3,"sources":["components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","state","loading","newDiscordWebhookUrl","handleSubmit","bind","handleInputChange","event","preventDefault","console","log","this","setState","fetch","then","res","catch","err","target","value","onSubmit","className","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6QAGqBA,G,wDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,SAAS,EACTC,qBAAsB,IAG1B,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBATV,E,yDAYNE,GAAQ,IAAD,OAChBA,EAAMC,iBACNC,QAAQC,IAAIC,KAAKV,MAAME,sBAEvBQ,KAAKC,SAAS,CAACV,SAAS,IACxBW,MAAM,qBACLC,MAAK,SAAAC,GACFN,QAAQC,IAAIK,GAEZ,EAAKH,SAAS,CACVV,SAAS,EACTC,qBAAsB,QAG7Ba,OAAM,SAAAC,GACHR,QAAQC,IAAIO,GAEZ,EAAKL,SAAS,CACVV,SAAS,EACTC,qBAAsB,U,wCAKhBI,GACdI,KAAKC,SAAS,CACVT,qBAAsBI,EAAMW,OAAOC,U,+BAKvC,OACI,6BACI,0BAAMC,SAAWT,KAAKP,cAClB,yBAAKiB,UAAU,SACX,yBAAKA,UAAU,WACX,2BAAOC,KAAK,OACRD,UAAU,kBACVE,YAAY,yCACZJ,MAAQR,KAAKV,MAAME,qBACnBqB,SAAWb,KAAKL,sBAG5B,yBAAKe,UAAU,SACX,yBAAKA,UAAU,6BACX,4BAAQC,KAAK,SACTD,UAAU,iCADd,oC,GA3DMI,IAAMC,YCCnBC,E,uKAGb,OACI,yBAAKN,UAAU,8BACX,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,SAAd,yBACA,kBAAC,EAAD,a,GARSI,IAAMC,W,MCQnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.88b5e2f6.chunk.js","sourcesContent":["import React from 'react';\nimport './Form.css';\n\nexport default class Form extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: false,\n            newDiscordWebhookUrl: ''\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(this.state.newDiscordWebhookUrl);\n\n        this.setState({loading: true});\n        fetch('http://google.com')\n        .then(res => {\n            console.log(res)\n\n            this.setState({\n                loading: false,\n                newDiscordWebhookUrl: ''\n            });\n        })\n        .catch(err => {\n            console.log(err)\n\n            this.setState({\n                loading: false,\n                newDiscordWebhookUrl: ''\n            });\n        });\n    }\n\n    handleInputChange(event) {\n        this.setState({\n            newDiscordWebhookUrl: event.target.value\n        });\n    }\n\n    render() {\n        return(\n            <div>\n                <form onSubmit={ this.handleSubmit } >\n                    <div className=\"field\">\n                        <div className=\"control\">\n                            <input type=\"text\"\n                                className=\"input is-medium\"\n                                placeholder=\"Paste here your discord webhook url...\"\n                                value={ this.state.newDiscordWebhookUrl }\n                                onChange={ this.handleInputChange } />\n                        </div>\n                    </div>\n                    <div className=\"field\">\n                        <div className=\"control has-text-centered\">\n                            <button type=\"submit\"\n                                className=\"button is-primary is-outlined\">\n                                GET MY JIRA ADAPTER LINK\n                            </button>\n                        </div>\n                    </div>\n                </form> \n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport Form from './Form';\n\nexport default class App extends React.Component {\n\n    render() {\n        return(\n            <div className=\"hero is-dark is-fullheight\">\n                <div className=\"hero-body has-text-centered\">\n                    <div className=\"container\">\n                        <h1 className=\"title\">JIRA WEBHOOKS ADAPTER</h1>\n                        <Form />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bulma/css/bulma.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}